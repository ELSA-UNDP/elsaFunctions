[{"path":[]},{"path":[]},{"path":"https://elsa-undp.github.io/elsaFunctions/articles/elsaR.html","id":"get-started","dir":"Articles","previous_headings":"Overview","what":"Get started","title":"An Example ELSA Workflow","text":"","code":"# load packages library(elsar) library(prioritizr) library(dplyr) library(ggplot2) library(sf) library(terra)  # set seed for reproducibility set.seed(500) # create boundary for Nepal boundary <- make_boundary(   boundary_in = boundary_dat,   iso3 = \"NPL\",   iso3_column = \"iso3cd\"   )  ggplot() + geom_sf(data = boundary) # create custom projection and apply it to boundary wkt <- make_custom_projection(boundary = boundary, iso3 = \"NPL\") boundary_proj <- sf::st_transform(boundary, crs = sf::st_crs(wkt)) # alternative boundary_proj2 <- make_boundary(   boundary_in = boundary_dat,   iso3 = \"NPL\",   iso3_column = \"iso3cd\",   do_project = TRUE ) # test crs print(sf::st_crs(boundary_proj) == sf::st_crs(boundary_proj2)) #> [1] TRUE # make planning units pus <- make_planning_units(boundary_proj = boundary_proj,                            pu_size = NULL,                            pu_threshold = 8.5e5,                            limit_to_mainland = FALSE) #> [1] \"The current number of planning units is: 3743382\" #> [1] \"The current number of planning units is: 2396805\" #> [1] \"The current number of planning units is: 1665187\" #> [1] \"The current number of planning units is: 1223941\" #> [1] \"The current number of planning units is: 741036\"  terra::plot(pus) # get feature data wad_dat <- get_wad_data()  terra::plot(wad_dat) # crop and normalise data wadOut <- make_normalised_raster(raster_in = wad_dat,                                  pus = pus,                                  iso3 = \"NPL\")  terra::plot(wadOut)"},{"path":"https://elsa-undp.github.io/elsaFunctions/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Scott Atkinson. Author, maintainer. Sandra Neubert. Author.","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Atkinson S, Neubert S (2024). elsar: Functions Tools Creating ELSA Tier 1 Data Stacks. R package version 0.0.1, https://elsa-undp.github.io/elsaFunctions/.","code":"@Manual{,   title = {elsar: Functions and Tools For Creating ELSA Tier 1 Data Stacks},   author = {Scott Atkinson and Sandra Neubert},   year = {2024},   note = {R package version 0.0.1},   url = {https://elsa-undp.github.io/elsaFunctions/}, }"},{"path":[]},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/boundary_dat.html","id":null,"dir":"Reference","previous_headings":"","what":"Data used to extract the Nepal boundary — boundary_dat","title":"Data used to extract the Nepal boundary — boundary_dat","text":"sf file containing Souther Asia boundary information","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/boundary_dat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data used to extract the Nepal boundary — boundary_dat","text":"","code":"boundary_dat"},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/boundary_dat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data used to extract the Nepal boundary — boundary_dat","text":"object class sf (inherits data.frame) 4 rows 21 columns.","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/boundary_dat.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data used to extract the Nepal boundary — boundary_dat","text":"https:// add link ","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/convert_points_polygon.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Buffered Polygons from Point Geometries — convert_points_polygon","title":"Create Buffered Polygons from Point Geometries — convert_points_polygon","text":"function creates polygon buffers around point geometries within given spatial layer. uses specified area attribute determine size buffer transforms geometries specified coordinate reference system accurate area calculations.","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/convert_points_polygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Buffered Polygons from Point Geometries — convert_points_polygon","text":"","code":"convert_points_polygon(   wdpa_layer,   area_attr = \"REP_AREA\",   area_crs = \"ESRI:54009\",   nQuadSegs = 50,   append_sf = TRUE )"},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/convert_points_polygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Buffered Polygons from Point Geometries — convert_points_polygon","text":"wdpa_layer sf object containing point geometries area attribute. area_attr character string specifying name area attribute. Default 'REP_AREA'. area_crs character string specifying coordinate reference system area calculations. Default 'ESRI:54009' (World Mollweide projection). nQuadSegs integer specifying number segments use buffering. Default 50. append_sf logical. TRUE, returns initial wdpa_layer polygons instead points. FALSE, returned points buffers.","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/convert_points_polygon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Buffered Polygons from Point Geometries — convert_points_polygon","text":"sf object buffered polygon geometries.","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/convert_points_polygon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Buffered Polygons from Point Geometries — convert_points_polygon","text":"","code":"if (FALSE) { # \\dontrun{  pa <- wdpar::wdpa_fetch(\"NPL\",   wait = TRUE,   download_dir = here::here() ) buffered_polygons <- convert_points_polygon(wdpa_layer = pa,       area_crs = sf::st_crs(pa))       } # }"},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/elsar-package.html","id":null,"dir":"Reference","previous_headings":"","what":"elsar: Functions and Tools For Creating ELSA Tier 1 Data Stacks — elsar-package","title":"elsar: Functions and Tools For Creating ELSA Tier 1 Data Stacks — elsar-package","text":"package (one paragraph).","code":""},{"path":[]},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/elsar-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"elsar: Functions and Tools For Creating ELSA Tier 1 Data Stacks — elsar-package","text":"Maintainer: Scott Atkinson scott.atkinson@undp.org (ORCID) Authors: Sandra Neubert s.neubert@uq.edu.au (ORCID)","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/extract_filename_filetype.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the file name and file type of data in the local path — extract_filename_filetype","title":"Extract the file name and file type of data in the local path — extract_filename_filetype","text":"helper function used wrapper function load local data (can extended later work postgres).","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/extract_filename_filetype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the file name and file type of data in the local path — extract_filename_filetype","text":"","code":"extract_filename_filetype(data_name, file_path)"},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/extract_filename_filetype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the file name and file type of data in the local path — extract_filename_filetype","text":"data_name name data interest (needs way provided file name) file_path local path data saved.","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/extract_filename_filetype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the file name and file type of data in the local path — extract_filename_filetype","text":"list form dictionary contains \"filename\" \"filetype\". Can used inputs load_data().","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/get_all_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper function to get a raster file with all wanted features — get_all_features","title":"Wrapper function to get a raster file with all wanted features — get_all_features","text":"Wrapper function get raster file wanted features","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/get_all_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper function to get a raster file with all wanted features — get_all_features","text":"","code":"get_all_features(feature_list, path_in, pus, iso3, output_path = NULL, ...)"},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/get_all_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper function to get a raster file with all wanted features — get_all_features","text":"feature_list list features wanted downstream ELSA workflow. path_in common path data can found. pus SpatRaster file contains reference spatial extent, crs etc.form planning units iso3 string iso3 name data (country name) output_path optional output path created files. ... Additional attributes needed functions wanted.","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/get_all_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper function to get a raster file with all wanted features — get_all_features","text":"SpatRaster length feature_list + 1 since planning units first layer.","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/get_all_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper function to get a raster file with all wanted features — get_all_features","text":"","code":"if (FALSE) { # \\dontrun{ feature_list <- c(\"fml\", \"cropsuit\", \"fi\")  all_feats <- get_all_features(feature_list = feature_list,                               path_in = \"<yourpath>\",                               pus = pus,                               iso3 = \"NPL\") } # }"},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/load_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load different types of data — load_data","title":"Load different types of data — load_data","text":"Load different types data","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/load_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load different types of data — load_data","text":"","code":"load_data(   file_name,   file_path = NULL,   file_lyr = NULL,   file_type,   wkt_filter = FALSE,   bb_extend = NULL,   db_info,   iso3_column = \"iso3cd\",   iso3 )"},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/load_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load different types of data — load_data","text":"file_name character file name. Needs contain file type ending (e.g. .tif) loading local source. file_path path local file stored. Needs NULL using postgres. file_lyr optional. Layer information data. file_type character file type. Current options : \"postgres\", \"shp\", \"gpkg\", \"geojson\", \"tif\", \"tiff\", \"grd\", \"gri\", \"nc\", \"hdf\" wkt_filter character; WKT representation spatial filter used bound loaded data bb_extend SpatRaster used bounding box wkt_filter = TRUE, e.g. planning units db_info list style dictionary. needed file_type = \"postgres\". Needs following structure information: postgres_dict <- c(host = \"\", dbname =\"\", port = , user = \"\", password = \"\") iso3_column relevant file_type \"postgres\" selected. string name iso3 information can found dataset. iso3 iso3 country code (character) country interest.","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/load_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load different types of data — load_data","text":"loaded data either SpatRaster sf object","code":""},{"path":[]},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_boundary.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a boundary of the planning region — make_boundary","title":"Create a boundary of the planning region — make_boundary","text":"Create boundary planning region","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_boundary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a boundary of the planning region — make_boundary","text":"","code":"make_boundary(   boundary_in,   input_type = \"sf\",   limit_to_mainland = FALSE,   col_name = NULL,   filter_out = 0,   do_project = FALSE,   iso3 = NULL,   iso3_column,   output_path = NULL )"},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_boundary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a boundary of the planning region — make_boundary","text":"boundary_in file containing boundary information. Can sf SpatRaster input_type string either \"sf\" \"SpatRaster\" (default \"sf\"). limit_to_mainland Logical. Limits extent data mainland. col_name string column containing actual extent planning region (outside area). Can NULL. filter_out value representing outside area data (e.g. 0) do_project Logical. TRUEif custom projection planning region wanted. iso3 iso3 country code (character) country interest. iso3_column relevant iso3 != NULL. string name iso3 information can found dataset. output_path optional output path created file. needed do_project = TRUE.","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_boundary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a boundary of the planning region — make_boundary","text":"sf object boundary planning region","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_boundary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a boundary of the planning region — make_boundary","text":"","code":"boundary <- make_boundary(   boundary_in = boundary_dat,   iso3 = \"NPL\",   iso3_column = \"iso3cd\" )"},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_custom_projection.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a custom projection based on the planning region — make_custom_projection","title":"Create a custom projection based on the planning region — make_custom_projection","text":"Create custom projection based planning region","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_custom_projection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a custom projection based on the planning region — make_custom_projection","text":"","code":"make_custom_projection(   boundary,   output_path = NULL,   iso3_column = \"iso_sov1\",   iso3 )"},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_custom_projection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a custom projection based on the planning region — make_custom_projection","text":"boundary sf object boundary planning region. match iso3 country code. output_path optional output path created file. iso3_column string name iso3 information can found dataset. iso3 iso3 country code (character) country interest.","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_custom_projection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a custom projection based on the planning region — make_custom_projection","text":"wkt file centred planning region","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_custom_projection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a custom projection based on the planning region — make_custom_projection","text":"","code":"boundary <- make_boundary(   boundary_in = boundary_dat,   iso3 = \"NPL\",   iso3_column = \"iso3cd\" )  wkt <- make_custom_projection(boundary = boundary, iso3 = \"NPL\")"},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_forest_integrity.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the forest integrity index using flii and fsii data — make_forest_integrity","title":"Create the forest integrity index using flii and fsii data — make_forest_integrity","text":"Create forest integrity index using flii fsii data","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_forest_integrity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the forest integrity index using flii and fsii data — make_forest_integrity","text":"","code":"make_forest_integrity(raster_flii, raster_fsii, pus, iso3, output_path = NULL)"},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_forest_integrity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the forest integrity index using flii and fsii data — make_forest_integrity","text":"raster_flii SpatRaster file flii information. raster_fsii SpatRaster file fsii information. pus SpatRaster file contains reference spatial extent, crs etc.form planning units iso3 string iso3 name data (country name) output_path optional output path created file.","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_forest_integrity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create the forest integrity index using flii and fsii data — make_forest_integrity","text":"SpatRaster file forest integrity index aligned normalised","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_forest_integrity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create the forest integrity index using flii and fsii data — make_forest_integrity","text":"","code":"if (FALSE) { # \\dontrun{ forest_integrity <- make_forest_integrity(   raster_flii = raster_flii,   raster_fsii = raster_fsii,   pus = pus ) } # }"},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_mangroves.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to extract general vector data — make_mangroves","title":"Function to extract general vector data — make_mangroves","text":"make_mangroves()allows align, normalise sffile save raster file. Originally created prepare Global Mangrove Watch data.","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_mangroves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to extract general vector data — make_mangroves","text":"","code":"make_mangroves(sf_in, pus, iso3, name_out, output_path = NULL)"},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_mangroves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to extract general vector data — make_mangroves","text":"sf_in sf file contains data put right format pus SpatRaster file contains reference spatial extent, crs etc.form planning units iso3 string iso3 name data (country name) name_out string data name used output tiffile output_path optional output path created file.","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_mangroves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to extract general vector data — make_mangroves","text":"SpatRaster file aligned normalised","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_mangroves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to extract general vector data — make_mangroves","text":"","code":"if (FALSE) { # \\dontrun{ boundary_proj <- make_boundary(   boundary_in = boundary_dat,   iso3 = \"IND\",   iso3_column = \"iso3cd\",   do_project = TRUE )  # make planning units pus <- make_planning_units(   boundary_proj = boundary_proj,   pu_size = NULL,   pu_threshold = 8.5e5,   limit_to_mainland = FALSE )  path_in <- \"<yourPath>\" ist_dat <- extract_filename_filetype(   data_name = \"gmw\",   file_path = path_in )  mangroves <- load_data(   file_name = paste0(list_dat[\"filename\"][[1]], list_dat[\"filetype\"][[1]]),   file_path = path_in,   file_type = list_dat[\"filetype\"][[1]],   wkt_filter = TRUE,   bb_extend = pus )  mangrove_raster <- make_mangroves(   sf_in = mangroves,   pus = pus ) } # }"},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_normalised_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to extract general raster data — make_normalised_raster","title":"Function to extract general raster data — make_normalised_raster","text":"make_normalised_raster()allows align, normalise save raster file. applicable following data applicable following data sets: certified forests, drought risk, flood risk, intact wilderness area, soc difference, threatened species richness, voc, wad convergence evidence","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_normalised_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to extract general raster data — make_normalised_raster","text":"","code":"make_normalised_raster(   raster_in,   pus,   iso3,   invert = FALSE,   rescaled = TRUE,   name_out,   output_path = NULL )"},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_normalised_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to extract general raster data — make_normalised_raster","text":"raster_in SpatRaster file contains data put right format pus SpatRaster file contains reference spatial extent, crs etc.form planning units iso3 string iso3 name data (country name) invert Logical. Default FALSE. TRUE, highest values original dataset valued lowest prioritisation. rescaled Logical. Default TRUE. remain TRUE unless specific reason rescale. name_out string data name used output tiffile output_path optional output path created file.","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_normalised_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to extract general raster data — make_normalised_raster","text":"SpatRaster file aligned normalised","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_normalised_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to extract general raster data — make_normalised_raster","text":"","code":"boundary_proj <- make_boundary(   boundary_in = boundary_dat,   iso3 = \"NPL\",   iso3_column = \"iso3cd\",   do_project = TRUE )  pus <- make_planning_units(boundary_proj = boundary_proj,                            pu_size = NULL,                            pu_threshold = 8.5e5,                            limit_to_mainland = FALSE) #> [1] \"The current number of planning units is: 3743382\" #> [1] \"The current number of planning units is: 2396805\" #> [1] \"The current number of planning units is: 1665187\" #> [1] \"The current number of planning units is: 1223941\" #> [1] \"The current number of planning units is: 741036\" wad_dat <- get_wad_data()  wadOut <- make_normalised_raster(raster_in = wad_dat,                                  pus = pus,                                  iso3 = \"NPL\")"},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_planning_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to create planning units and custom projection — make_planning_units","title":"Function to create planning units and custom projection — make_planning_units","text":"function creates planning units spatial prioritisation problem raster format. also creates custom projection (wkt file) centred planning region based Mollweide projection.","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_planning_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to create planning units and custom projection — make_planning_units","text":"","code":"make_planning_units(   boundary_proj,   pu_size = NULL,   pu_threshold = 850000,   limit_to_mainland = FALSE,   iso3,   output_path = NULL )"},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_planning_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to create planning units and custom projection — make_planning_units","text":"boundary_proj sfobject representing boundary planning region preferred projection. Preferably generated make_boundary() pu_size way define custom planning unit size. Can NULL use default settings generate planning units small possible whilst still computationally efficient. pu_threshold integer value gives maximum number PUs. default (8.5e5) set based prioritizr processing time, network transfer time solver time. limit_to_mainland logical determines whether planning units created mainland area (FALSE; default) (TRUE) iso3 iso3 country code (character) country interest. output_path optional output path created file.","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_planning_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to create planning units and custom projection — make_planning_units","text":"raster (.tif) file planning unit information chosen planning region.","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_planning_units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to create planning units and custom projection — make_planning_units","text":"","code":"boundary_proj <- make_boundary(   boundary_in = boundary_dat,   iso3 = \"NPL\",   iso3_column = \"iso3cd\",   do_project = TRUE )  pus <- make_planning_units(boundary_proj = boundary_proj,                            pu_size = NULL,                            pu_threshold = 8.5e5,                            limit_to_mainland = FALSE) #> [1] \"The current number of planning units is: 3743382\" #> [1] \"The current number of planning units is: 2396805\" #> [1] \"The current number of planning units is: 1665187\" #> [1] \"The current number of planning units is: 1223941\" #> [1] \"The current number of planning units is: 741036\""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_protected_areas.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to create existing protected area raster file. — make_protected_areas","title":"Function to create existing protected area raster file. — make_protected_areas","text":"Function create existing protected area raster file.","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_protected_areas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to create existing protected area raster file. — make_protected_areas","text":"","code":"make_protected_areas(   from_wdpa = TRUE,   iso3,   download_path = NULL,   sf_in,   status = c(\"Established\", \"Inscribed\", \"Designated\"),   pa_def = 1,   designation_mab = FALSE,   buffer_points = TRUE,   area_column = \"REP_AREA\",   nQuadSegs = 50,   pus,   output_path = NULL )"},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_protected_areas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to create existing protected area raster file. — make_protected_areas","text":"from_wdpa logical. TRUE, downloads data wdpar package. information data package, please consult online package documentation. iso3 string iso3 name data (country name) download_path path wdpa data saved . sf_in sf object alternative downloading data wdpar package. needed from_wdpa FALSE. status vector containing status protected area included. Based STATUS field wdpa database. Default c(\"Established\", \"Inscribed\", \"Designated\"). pa_def value list values containing pa definition (1 = protected area; 0 = OECM (supported yet)) include. Default 1. designation_mab logical. FALSE, excludes UNESCO MAB areas. buffer_points logical. relevant \"POINT\" \"MULTIPOINT\" geometries exist data. TRUE, creates circular buffer around \"POINT\" data based area information data used polygon data needed exactextractr calculations. area_column string column name area information needed buffer calculations. nQuadSegs integer specifying number segments use buffering. Default 50. pus raster file contains reference spatial extent, crs etc.form planning units. output_path optional output path created file.","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_protected_areas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to create existing protected area raster file. — make_protected_areas","text":"rasterfile aligned planning units","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/make_protected_areas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to create existing protected area raster file. — make_protected_areas","text":"","code":"if (FALSE) { # \\dontrun{ boundary_proj <- make_boundary(   boundary_in = boundary_dat,   iso3 = \"NPL\",   iso3_column = \"iso3cd\",   do_project = TRUE )  pus <- make_planning_units(   boundary_proj = boundary_proj,   pu_size = NULL,   pu_threshold = 8.5e5,   limit_to_mainland = FALSE )  current_pas <- make_protected_areas(   iso3 = \"NPL\",   download_path = here::here(),   buffer_points = TRUE,   pus = pus ) } # }"},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/rescale_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Rescale rasters to between 0 and 1 — rescale_raster","title":"Rescale rasters to between 0 and 1 — rescale_raster","text":"Rescale rasters 0 1","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/rescale_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rescale rasters to between 0 and 1 — rescale_raster","text":"","code":"rescale_raster(   raster_in,   raster_in_min = terra::global(raster_in, min, na.rm = TRUE)$min,   raster_in_max = terra::global(raster_in, max, na.rm = TRUE)$max,   new_min = 0,   new_max = 1 )"},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/rescale_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rescale rasters to between 0 and 1 — rescale_raster","text":"raster_in Input raster raster_in_min Min value raster raster_in_max Max value raster new_min 0 new_max 1","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/rescale_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rescale rasters to between 0 and 1 — rescale_raster","text":"raster file normalised 0 1","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/rescale_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rescale rasters to between 0 and 1 — rescale_raster","text":"","code":"if (FALSE) { # \\dontrun{ raster_rescaled <- rescale_raster(dat_aligned) } # }"},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/wad_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get wad data saved as tif — get_wad_data","title":"Get wad data saved as tif — get_wad_data","text":"Get wad data saved tif","code":""},{"path":"https://elsa-undp.github.io/elsaFunctions/reference/wad_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get wad data saved as tif — get_wad_data","text":"","code":"get_wad_data()"}]
